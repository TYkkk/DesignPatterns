1、单一职责原则--一个类只干一件事，实现类要单一
一个类应当只有一个引起它变化的原因。即只有一个需求变动的情况下才导致修改这个类。减少类的耦合度和复杂度，增加其复用性。

2、开闭原则--对扩展开放，对修改关闭
对扩展开放，对修改关闭。即可通过创建其子类进行功能扩展，不修改原始的类，不影响其原本功能。

3、里氏替换原则--不要破坏继承体系，子类重写方法功能发生改变，不应该影响父类方法的含义
子类可以扩展父类的功能，但不能改变父类原有的功能。在重写父类功能后，要保障父类不会因参数的变化而出现错误的情况。

4、依赖倒置原则--高层不应该依赖低层，要面向接口编程
要面向接口编程，不要面向实现编程。依赖抽象而不依赖现实模块。

5、接口隔离原则--一个接口只干一件事，接口要精简单一
创建多个专门分类的接口，避免使用单一的总接口导致程序臃肿，实现过多无用的接口方法。

6、合成复用原则--尽量使用组合或者聚合关系实现代码复用，少使用继承
通过将已有的对象纳入新对象中，作为新对象的成员对象来实现的，新对象可以调用已有对象的功能，从而达到复用。例如思考建立一个描述 汽车（电动、汽油）颜色（红、黄、蓝）的多个类关系。

7、迪米特法则--不该知道的不要知道，一个类应该保持对其它对象最少的了解，降低耦合度
从依赖者的角度来说，只依赖应该依赖的对象。从被依赖者的角度说，只暴露应该暴露的方法。
对其余对象不必要知道的东西就不知道。